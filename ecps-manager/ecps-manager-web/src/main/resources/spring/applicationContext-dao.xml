<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <!--加载配置文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--允许JVM 参数覆盖-->
        <!-- java -Djdbc.url=123 -jar xxx.jar -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <!--忽略没有找到的资源-->
        <property name="ignoreResourceNotFound" value="true"/>
        <!--配置资源文件-->
        <property name="locations">
            <list>
                <value>classpath:properties/jdbc.properties</value>
                <value>classpath:properties/httpclient.properties</value>
                <value>classpath:properties/rabbitmq.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/pictureupload.properties</value>
            </list>
        </property>
    </bean>

    <!--数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!--基本属性 url user password-->
        <property name="url" value="${jdbc.master.url}"/>
        <property name="username" value="${jdbc.master.username}"/>
        <property name="password" value="${jdbc.master.password}"/>
        <property name="driverClassName" value="${jdbc.master.driver}"/>

        <!--配置初始化大小 最小 最大-->
        <property name="initialSize" value="3"/>
        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 配置连接池 -->
 <!--   <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        &lt;!&ndash; 数据库驱动 &ndash;&gt;
        <property name="driverClassName" value="${jdbc.master.driver}"/>
        &lt;!&ndash; 相应驱动的jdbcUrl &ndash;&gt;
        <property name="url" value="${jdbc.master.url}"/>
        &lt;!&ndash; 数据库的用户名 &ndash;&gt;
        <property name="username" value="${jdbc.master.username}"/>
        &lt;!&ndash; 数据库的密码 &ndash;&gt;
        <property name="password" value="${jdbc.master.password}"/>

        &lt;!&ndash; 配置初始化大小 最小 最大 &ndash;&gt;
        <property name="initialSize" value="3"/>
        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000"/>
    </bean>

    &lt;!&ndash; 配置连接池 &ndash;&gt;
    <bean id="slave01DataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        &lt;!&ndash; 数据库驱动 &ndash;&gt;
        <property name="driverClassName" value="${jdbc.salve01.driver}"/>
        &lt;!&ndash; 相应驱动的jdbcUrl &ndash;&gt;
        <property name="url" value="${jdbc.salve01.url}"/>
        &lt;!&ndash; 数据库的用户名 &ndash;&gt;
        <property name="username" value="${jdbc.salve01.username}"/>
        &lt;!&ndash; 数据库的密码 &ndash;&gt;
        <property name="password" value="${jdbc.salve01.password}"/>

        &lt;!&ndash; 配置初始化大小 最小 最大 &ndash;&gt;
        <property name="initialSize" value="3"/>
        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000"/>
    </bean>-->

    <!-- 定义datasource 使用自己的数据源-->
   <!-- <bean id="dataSource" class="com.ecps.dynamicdatasource.DynamicDataSource">

        &lt;!&ndash; 设置多个数据源 &ndash;&gt;
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                &lt;!&ndash; 这里的kuy 需要和程序中的key 相一致&ndash;&gt;
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave" value-ref="slave01DataSource"/>
            </map>
        </property>

        &lt;!&ndash; 设置默认数据源 &ndash;&gt;
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>-->

    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载mybatis 全局配置文件-->
        <property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"/>

        <!-- 配置model包使用别名,多个包可以；隔开，推荐放在mybatis全局配置文件中-->
        <!--<property name="typeAliases" value="com.imooc.seckill.model"/>-->
        <!-- 扫描sql配置文件 XXmapper.xml -->
        <!--如果xml和mapper接口不在同一个包下则使用这个配置-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>-->
    </bean>

    <!--不使用通用mapper 扫描mapper文件-->
  <!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        &lt;!&ndash;为了防止提前初始化上面配置的sqlSessionFactory&ndash;&gt;
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        &lt;!&ndash;扫描mapper文件&ndash;&gt;
        <property name="basePackage" value="com.ecps.mapper"/>
    </bean>-->

    <!--使用通用mapper-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ecps.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
</beans>