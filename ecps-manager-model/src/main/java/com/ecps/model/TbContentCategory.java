package com.ecps.model;

import com.ecps.model.base.BaseModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;

@ApiModel(value="内容分类",description="数据库表：tb_content_category")
@Table(name = "tb_content_category")
public class TbContentCategory extends BaseModel{

    @ApiModelProperty(value="类目ID",name="id", required=true)
    @NotEmpty
    @Id
    @Column(name = "id")
    private Long id;

    @ApiModelProperty(value="父类目ID=0时，代表的是一级的类目",name="parentId")
    @Column(name = "parent_id")
    private Long parentId;

    @ApiModelProperty(value="分类名称",name="name")
    @Column(name = "name")
    private String name;

    @ApiModelProperty(value="状态。可选值:1(正常),2(删除)",name="status")
    @Column(name = "status")
    private Integer status;

    @ApiModelProperty(value="排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数",name="sortOrder")
    @Column(name = "sort_order")
    private Integer sortOrder;

    @ApiModelProperty(value="该类目是否为父类目，1为true，0为false",name="isParent")
    @Column(name = "is_parent")
    private Boolean isParent;

    /**
     * 获取 类目ID 字段:tb_content_category.id
     *
     * @return tb_content_category.id, 类目ID
     */
    public Long getId() {
        return id;
    }

    /**
     * 设置 类目ID 字段:tb_content_category.id
     *
     * @param id the value for tb_content_category.id, 类目ID
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * 获取 父类目ID=0时，代表的是一级的类目 字段:tb_content_category.parent_id
     *
     * @return tb_content_category.parent_id, 父类目ID=0时，代表的是一级的类目
     */
    public Long getParentId() {
        return parentId;
    }

    /**
     * 设置 父类目ID=0时，代表的是一级的类目 字段:tb_content_category.parent_id
     *
     * @param parentId the value for tb_content_category.parent_id, 父类目ID=0时，代表的是一级的类目
     */
    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    /**
     * 获取 分类名称 字段:tb_content_category.name
     *
     * @return tb_content_category.name, 分类名称
     */
    public String getName() {
        return name;
    }

    /**
     * 设置 分类名称 字段:tb_content_category.name
     *
     * @param name the value for tb_content_category.name, 分类名称
     */
    public void setName(String name) {
        this.name = name == null ? null : name.trim();
    }

    /**
     * 获取 状态。可选值:1(正常),2(删除) 字段:tb_content_category.status
     *
     * @return tb_content_category.status, 状态。可选值:1(正常),2(删除)
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 状态。可选值:1(正常),2(删除) 字段:tb_content_category.status
     *
     * @param status the value for tb_content_category.status, 状态。可选值:1(正常),2(删除)
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * 获取 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数 字段:tb_content_category.sort_order
     *
     * @return tb_content_category.sort_order, 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数
     */
    public Integer getSortOrder() {
        return sortOrder;
    }

    /**
     * 设置 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数 字段:tb_content_category.sort_order
     *
     * @param sortOrder the value for tb_content_category.sort_order, 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数
     */
    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    /**
     * 获取 该类目是否为父类目，1为true，0为false 字段:tb_content_category.is_parent
     *
     * @return tb_content_category.is_parent, 该类目是否为父类目，1为true，0为false
     */
    public Boolean getIsParent() {
        return isParent;
    }

    /**
     * 设置 该类目是否为父类目，1为true，0为false 字段:tb_content_category.is_parent
     *
     * @param isParent the value for tb_content_category.is_parent, 该类目是否为父类目，1为true，0为false
     */
    public void setIsParent(Boolean isParent) {
        this.isParent = isParent;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content_category
     *
     * @mbggenerated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", parentId=").append(parentId);
        sb.append(", name=").append(name);
        sb.append(", status=").append(status);
        sb.append(", sortOrder=").append(sortOrder);
        sb.append(", isParent=").append(isParent);
        sb.append("]");
        return sb.toString();
    }
}